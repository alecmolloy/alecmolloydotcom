stroke 0
# Implementation of my Perlin2D.js code, available here: https://github.com/alecmolloy/Perlin.js/blob/master/js/Perlin2D.js
# View the Javascript demo here: http://alecmolloy.com/perlin-noise/
stroke 0
class Perlin2D 
    constructor: () ->
        @cellSize = 100
        @height = stage.height
        @width = stage.width

        @createLatticeArray()
        @drawPerlin()

    dotProduct : (ix, iy, x, y) ->
        x /= this.cellSize;
        y /= this.cellSize;

        # Precomputed (or otherwise) gradient vectors at each grid point X,Y
        gradient = this.lattice.grid;

        # Compute the distance vector
        dx = x - ix;
        dy = y - iy;

        value = (dx * gradient[iy][ix][0] + dy * gradient[iy][ix][1]);

        # Compute the dot-product
        return value;

    createLatticeArray : ->
        # Create a 2D array for the lattice
        this.lattice = {
            width: Math.ceil(this.width / this.cellSize) + 1,
            height: Math.ceil(this.height / this.cellSize) + 1
        }

        this.lattice.grid = new Array(this.lattice.height);
        for i in [0 .. this.lattice.height]
            this.lattice.grid[i] = new Array(this.lattice.width);

        # Fill the lattice with random gradient vectors
        for cellY in [0 .. this.lattice.height]
            for cellX in [0 .. this.lattice.height]
                angle = Math.floor(Math.random() * 16) / 16 * Math.PI * 2;
                this.lattice.grid[cellY][cellX] = [Math.cos(angle), Math.sin(angle)];

    calculatePoint : (x, y) ->
        # Calculate the displacement of the corners of the lattice cell relative to the current pixel
        x0 = Math.floor(x / this.cellSize);
        x1 = x0 + 1;
        y0 = Math.floor(y / this.cellSize);
        y1 = y0 + 1;

        # Interpolation weight
        sx = x / this.cellSize - x0;
        sy = y / this.cellSize - y0;

        # Calculate the gradient values at the sample point by taking the dot product of the displacement vectors and their respective gradient vectors
        n00 = this.dotProduct(x0, y0, x, y);
        n10 = this.dotProduct(x1, y0, x, y);
        n01 = this.dotProduct(x0, y1, x, y);
        n11 = this.dotProduct(x1, y1, x, y);

        # Interpolate the four gradient values at the current pixel
        ix0 = @fdpoly(n00, n10, sx);
        ix1 = @fdpoly(n01, n11, sx);
        value = @fdpoly(ix0, ix1, sy);
        value += 1 / Math.sqrt(2)
        value /= (1 / Math.sqrt(2)) * 2;

        return value;

    drawPerlin : ->
        # Cycle through all pixels
        for y in [0 .. this.height]
            for x in [0 .. this.width]
                c = this.calculatePoint(x, y)
                c = colour opacity blue, c
                moveTo x, y
                color = c
                square 1 

    fdpoly : (a0, a1, w) ->
        iw = (6 * Math.pow(w, 5)) - (15 * Math.pow(w, 4)) + (10 * Math.pow(w, 3))
        value = (1 - iw) * a0 + (iw * a1)
        return value

perlin = new Perlin2D()





for y in [ 0 ... 7]
    for x in [0 ... 7]
        if y is 1 or y is 2
            color red
        if y is 3 or y is 6
            color charcoal
        if y is 4 or y is 5
            color blue
        if x is 6 or x is 1
            color charcoal
        moveTo -8 + x * 30, 50 + y * 40 + x * 7
        rectangle 5 * x, x * 5
moveTo 205, 92
square 270

color red
move 30, 30
square 90

color blue
move 0, 120
square 90

color green
move 120, 0
square 90

color yellow
move 0, -120
square 90

moveTo 250, 450
font "Arial", 60
bold true
color charcoal
text "Windows      "
move 125
color white
text "95"